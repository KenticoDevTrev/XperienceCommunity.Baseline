using Account.Models;
using CMS.ContentEngine;
using CMS.DataEngine;
using Kentico.Xperience.Admin.Base.FormAnnotations;
using Kentico.Xperience.Admin.Base.Forms;
using XperienceCommunity.ChannelSettings.Admin.UI.ChannelCustomSettings;
using XperienceCommunity.ChannelSettings.Repositories;
/*
 * Can include the below lines if you want Password management to be in Xperience and by channel
[assembly: UIPage(parentType: typeof(Kentico.Xperience.Admin.Base.UIPages.ChannelEditSection),
    slug: "member-password-channel-custom-settings",
    uiPageType: typeof(MemberPasswordChannelSettingsExtender),
    name: "Member Password Settings",
    templateName: TemplateNames.EDIT,
    order: UIPageOrder.NoOrder)]
*/
namespace Account.Admin.Xperience.Models
{

    public class MemberPasswordChannelSettingsExtender(Kentico.Xperience.Admin.Base.Forms.Internal.IFormItemCollectionProvider formItemCollectionProvider,
                                                                     IFormDataBinder formDataBinder,
                                                                     IChannelCustomSettingsRepository customChannelSettingsRepository,
                                                                     IChannelSettingsInternalHelper channelCustomSettingsInfoHandler,
                                                                     IInfoProvider<ChannelInfo> channelInfoProvider)
        // Change type below to your settings
        : ChannelCustomSettingsPage<MemberPasswordChannelSettingsFormAnnotated>(formItemCollectionProvider, formDataBinder, customChannelSettingsRepository, channelCustomSettingsInfoHandler, channelInfoProvider)
    {
    }

    public class MemberPasswordChannelSettingsFormAnnotated : MemberPasswordChannelSettings
    {

        [CheckBoxComponent(Label = "Use password policy", Order = 1, ExplanationText = "If checked, each new password defined anywhere in the system will be checked against the specified password policy rules.")]
        public override bool UsePasswordPolicy { get; set; } = false;

        [NumberInputComponent(Label = "Minimal length", Order = 2, ExplanationText = "Allowed length (in characters) of the user password. If empty or zero number of characters is not limited.")]
        public override int MinLength { get; set; } = 8;

        [NumberInputComponent(Label = "Number of non alphanumeric characters", Order = 3, ExplanationText = "Minimal number of non alphanumeric characters which password has to contain. National characters aren't taken as alpha characters.")]
        public override int NumNonAlphanumericChars { get; set; } = 1;

        [TextInputComponent(Label = "Regular expression", Order = 4, ExplanationText = "If set, passwords input by users need to meet the given regular expression. Does not apply to passwords generated by the system.")]
        public override string Regex { get; set; } = string.Empty;

        [TextInputComponent(Label = "Policy violation message", Order = 5, ExplanationText = "Specifies a custom message that will be displayed to users who attempt to enter a password which does not fulfill the requirements of the password policy. If left empty, a default message will be shown.")]
        public override string ViolationMessage { get; set; } = string.Empty;
    }
}
