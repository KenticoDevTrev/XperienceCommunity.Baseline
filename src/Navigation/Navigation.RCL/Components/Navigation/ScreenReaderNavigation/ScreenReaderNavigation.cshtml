@using Navigation.Components.Navigation.ScreenReaderNavigation
@model ScreenReaderNavigationViewModel
<nav class="visually-hidden ada-main-navigation" role="navigation" aria-label="Screen Reader Navigation">
    <ul id="@Model.Id" name="@Model.Id">
        @foreach (var navItem in Model.NavigationItems)
        {
            <partial name="/Components/Navigation/ScreenReaderNavigation/ScreenReaderNavigationList.cshtml" model="new ScreenReaderNavigationListViewModel(navItem, 1)" />
        }
    </ul>
</nav>
<script>
    @if(Model.NavShortcutSelector.TryGetValue(out var navShortcutId))
    {
    <text>
    var navShortcuts = document.querySelectorAll('@(navShortcutId)');
    if (navShortcuts) {
        navShortcuts.forEach(function (navShortcut) {
            navShortcut.addEventListener('keydown', function (e) {
                switch (e.key) {
                    case 'Enter':
                    case ' ':
                    case 'Space':
                        var firstNavItem = document.querySelector('#@(Model.Id) > li:first-child > a');
                        if (firstNavItem) {
                            firstNavItem.focus();
                        }
                        e.preventDefault();
                        break;
                }
            });
        });
    }
    </text>
    }

    // enable left/right/up/down navigation
    var navLinks = document.querySelectorAll('#@(Model.Id.TrimStart('#')) a');
    for(var n = 0; n< navLinks.length; n++){
        navLinks[n].addEventListener('keydown', function(event) {
            var link = this;
            var parentLi = link.parentElement;
            var parentUl = parentLi.parentElement;
            switch (event.key) {
                case 'ArrowLeft':
                    let prevLink = parentLi.previousElementSibling;
                    if (prevLink) {
                        prevLink.querySelector('a').focus();
                    }
                    break;
                case 'ArrowUp':
                    let parentLink = parentUl.previousElementSibling;
                    if (parentLink) {
                        $(parentLink).focus();
                    }
                    break;
                case 'ArrowRight':
                    let nextLink = parentLi.nextElementSibling;
                    if (nextLink) {
                        nextLink.querySelector('a').focus();
                    }
                    break;
                case 'ArrowDown':
                    let childLink = link.nextElementSibling;
                    if (childLink) {
                        childLink.querySelector('li:first-child > a').focus();
                    }
                    break;
                case 'Enter':
                case ' ':
                case 'Space':
                    link.click();
                    break;
            }
        });
    }
</script>