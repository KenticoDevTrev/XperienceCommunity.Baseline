<?xml version="1.0" encoding="utf-8"?>
<!-- 
BASELINE CUSTOMIZATION - Site
This CI/CD repository configuration is a suggested starting point.  Full documentation is at https://docs.kentico.com/developers-and-admins/ci-cd, 
with special attention to https://docs.kentico.com/developers-and-admins/ci-cd/reference-ci-cd-object-types and https://docs.kentico.com/developers-and-admins/ci-cd/exclude-objects-from-ci-cd.

While you can track EVERYTHING, you really should limit what you want to track for multiple reasons:
1. Reduces the deployment package size to only the CI/CD items that you want to control
2. Reduces the time to run the CI/CD repository script.

What I've found useful is this:
1. Pick the parent objects you want to track in the IncludedObjectTypes/ObjectType
2. Remove any Child objects you don't want to track in the ExcludedObjectTypes/ObjectType
3. Only Include your specific items (based on a Prefix% wildcard) in the ObjectFilters/IncludedCodeNames or ObjectFilters/ExcludeCodeNames

For this sample, i have put CUSTOM as the "Custom Prefix" that you should replace with what you use.

You should also decide if you want the CI/CD to be Create, CreateUpdate, or Full.  I recomended...
- CreateUpdate IF all the objects you track are completely controlled by the Developers, but you also don't want to worry about objects getting deleted
- Create IF there are objects that you want to make sure exist, but some will be edited by content editors (note you'll need to account for manually updating post-deployment)
- Full IF all objects are controlled by Developers, and you are tracking everything (not recommended)

-->
<RepositoryConfiguration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <RestoreMode>CreateUpdate</RestoreMode>
  <IncludedObjectTypes>
    <!-- Add in custom object types that have CI/CD enabled here -->
    
    <!-- BASELINE CUSTOMIZATION - Search -->
    <ObjectType>KenticoLucene.LuceneReusableContentTypeItem</ObjectType>
    <ObjectType>KenticoLucene.LuceneContentTypeItem</ObjectType>
    <ObjectType>KenticoLucene.LuceneIncludedPathItem</ObjectType>
    <ObjectType>KenticoLucene.LuceneIndexLanguageItem</ObjectType>
    <ObjectType>KenticoLucene.LuceneIndexItem</ObjectType>

    <ObjectType>NittinLocalization.LocalizationKeyItem</ObjectType>
    <!-- Not tracking the translations themselves, content editors should control 
    <ObjectType>NittinLocalization.LocalizationTranslationItem</ObjectType>
    -->

    <!-- These parent object types are things we will track-->
    <ObjectType>cms.resource</ObjectType>
    <ObjectType>cms.class</ObjectType>
    <!-- cms.alternativeform included -->

    <ObjectType>cms.channel</ObjectType>
    <!-- cms.contenttypechannel included -->
    <!-- cms.headlesschannel included -->
    <!-- cms.websitechannel included -->

    <ObjectType>cms.consent</ObjectType>

    <!-- This contains customizations to the CMS system module classes, such as Membership customizations -->
    <!-- TODO: See what system tables are included... -->
    <ObjectType>cms.systemtable</ObjectType>
    <!-- cms.alternativeform included -->
    <!-- cms.query included -->

    <ObjectType>cms.notificationemail</ObjectType>
    <ObjectType>cms.notificationemailtemplate</ObjectType>
    <ObjectType>cms.role</ObjectType>
    <!-- cms.applicationpermission included -->
    <!-- cms.userrole included - but excluded in ExcludedObjectTypes as usually Users are defined on each instance -->
    <!-- cms.workspacedatapermission included -->

    <ObjectType>cms.scheduledtaskconfiguration</ObjectType>
    <ObjectType>cms.settingscategory</ObjectType>
    <!-- 
    Not tracking these as usually they are instance specific, alongg with settings keys can contain secrets that you shouldn't serialize
    <ObjectType>cms.settingskey</ObjectType>
    <ObjectType>cms.user</ObjectType>
    -->

    <!-- May or may not want to track workspaces, up to you. -->
    <ObjectType>cms.workspace</ObjectType>

    <!-- Can apply a filter if you wish to these, usually they are fully controlled by Dev-->
    <ObjectType>cms.contenttype</ObjectType>
    <!-- emaillibrary.emailtemplatecontenttype included -->

    <!-- Below items you probably won't use, but if you do you may want to make sure you have ObjectFilters/IncludedCodeNames and a RestoreMode that is not Full 
    <ObjectType>contentitemdata.*</ObjectType>
    <ObjectType>cms.contentitem</ObjectType>
	    <!- cms.contentitemreference included ->
    <ObjectType>cms.contentitemcommondata</ObjectType>
    <ObjectType>cms.contentitemlanguagemetadata</ObjectType>
    <ObjectType>cms.headlessitem</ObjectType>
    <ObjectType>cms.webpageitem</ObjectType>
	    <!- cms.webpageformerurlpath included - but should exclude probably ->
	    <!- cms.webpageurlpath included - but should exclude probably ->
    <ObjectType>emaillibrary.emailconfiguration</ObjectType>
	    <!- emaillibrary.sendconfiguration included - but should exclude probably ->
      
    <ObjectType>cms.contentfolder</ObjectType>
    -->

    <!-- I would not recommend, even with a filter, tracking media files, instead any code-dependent image/file should be part of your packaged solution (see FrontEndDev folder) 
    <ObjectType>media.file</ObjectType>
    -->

    <!-- These page template configurations usually are generated by users, but you may want to track specific ones for the user to choose from 
    <ObjectType>cms.pagetemplateconfiguration</ObjectType>
    -->

    <!-- If you have Create / CreateUpdate mode on these, may be a good idea if you use these in code for content grouping, may just want to put a filter on it.-->
    <ObjectType>cms.smartfolder</ObjectType>

    <!-- If you use taxonomy and tags (such as for Member Roles), you will want to track these.  Use with caution if Restore Type is FULL as it will delete user tags -->
    <ObjectType>cms.taxonomy</ObjectType>
    <ObjectType>cms.tag</ObjectType>

    <ObjectType>cms.contentworkflow</ObjectType>
    <!-- cms.contentworkflowstep included -->
    <!-- cms.contentworkflowsteprole included with cms.contentworkflowstep -->
    <!-- cms.contentworkflowcontenttype included -->

    <!-- Should use filters to only track the ones your code depends on, users may create their own -->
    <ObjectType>om.activitytype</ObjectType>

    <ObjectType>ma.automationprocess</ObjectType>
    <!-- ma.automationstep included -->
    <!-- cms.workflowtransition included with ma.automationstep -->
    <!-- cms.objectworkflowtrigger included -->
    <!-- cms.contentworkflowrole included -->

    <ObjectType>ma.automationaction</ObjectType>
    <ObjectType>cms.objectworkflowtrigger</ObjectType>

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>om.contactgroup</ObjectType>

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>om.recipientlist</ObjectType>
    <!-- emaillibrary.recipientlistsettings included -->

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>om.trackedwebsite</ObjectType>

    <!-- You can track the country if you wish, but if you don't use countries at all, best just leave it out
    <ObjectType>cms.country</ObjectType>
    <!- cms.state included ->
    -->

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>emaillibrary.emailchannel</ObjectType>
    <!-- emaillibrary.emailchannelsender included -->

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>emaillibrary.emailtemplate</ObjectType>

    <!-- Should use filters to only track the ones your code depends on, users may want to create their own -->
    <ObjectType>cms.form</ObjectType>
    <ObjectType>cms.formclass</ObjectType>

    <ObjectType>cms.formfeaturedfield</ObjectType>

    <!-- Can track, but these are usually only used by internal Kentico 
    <ObjectType>cms.macrorule</ObjectType>
      <!- cms.macrorulemacrorulecategory included ->
	  <ObjectType>cms.macrorulecategory</ObjectType>
    -->

  </IncludedObjectTypes>

  <!-- Continuous integration processes all included object types except for the listed types. -->
  <ExcludedObjectTypes>
    <!-- Exclude by default as usually users are set on each instance -->
    <ObjectType>cms.userrole</ObjectType>

    <!-- XperienceCommunity.RelationshipsExtended's Content Item Category is a child of the cms.tag so need to exclude it -->
    <ObjectType>relationshipsextended.contentitemcategory</ObjectType>
    
  </ExcludedObjectTypes>

  <ObjectFilters>
    <IncludedCodeNames ObjectType="cms.resource">XperienceCommunity.%;RelationshipsExtended.%;CUSTOM%</IncludedCodeNames>
    <!-- CMS.ContentItemCommonData Contains reusable field schema definitions -->
    <IncludedCodeNames ObjectType="cms.class">CMS.ContentItemCommonData;KenticoLucene.%;NittinLocalization.%;XperienceCommunity.%;Generic.%;CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="om.activitytype">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="om.contactgroup">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="om.recipientlist">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="om.trackedwebsite">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="emaillibrary.emailchannel">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="emaillibrary.emailtemplate">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="cms.form">CUSTOM%</IncludedCodeNames>
    <IncludedCodeNames ObjectType="cms.formclass">CUSTOM%</IncludedCodeNames>


  </ObjectFilters>
</RepositoryConfiguration>